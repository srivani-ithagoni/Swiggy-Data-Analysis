-- Display all customers who live in 'Delhi'
SELECT customer_id, name, city
FROM swiggydb.customers
WHERE city = 'Delhi';

-- Find the average rating of all restaurants in 'Mumbai'
SELECT AVG(rating)
FROM swiggydb.restaurants
WHERE city = 'Mumbai';

-- List all customers who have placed at least one order
SELECT DISTINCT c.customer_id, c.name
FROM swiggydb.customers c
JOIN swiggydb.orders o ON c.customer_id = o.customer_id;

-- Display the total number of orders placed by each customer
SELECT c.customer_id, c.name, COUNT(o.order_id) AS total_orders
FROM swiggydb.customers c
JOIN swiggydb.orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.name;

-- Find the total revenue generated by each restaurant
SELECT r.restaurant_id, r.name, SUM(o.total_amount) AS total_revenue
FROM swiggydb.restaurants r
JOIN swiggydb.orders o ON r.restaurant_id = o.restaurant_id
GROUP BY r.restaurant_id, r.name
ORDER BY r.restaurant_id ASC;

--  Find the top 5 restaurants with the highest average rating
SELECT restaurant_id, name, AVG(rating) AS avg_rating
FROM swiggydb.restaurants
GROUP BY restaurant_id, name
ORDER BY avg_rating DESC
LIMIT 5;

--Display all customers who have never placed an order
SELECT c.customer_id, c.name, c.city
FROM swiggydb.customers c
LEFT JOIN swiggydb.orders o ON c.customer_id = o.customer_id
WHERE o.order_id IS NULL;

--  Find the number of orders placed by each customer in 'Mumbai'
SELECT c.customer_id, c.name, c.city, COUNT(o.order_id) AS orders_placed
FROM swiggydb.customers c
LEFT JOIN swiggydb.orders o ON c.customer_id = o.customer_id
WHERE c.city = 'Mumbai'
GROUP BY c.customer_id, c.name, c.city;

--  Display all orders placed in the last 30 days
SELECT *
FROM swiggydb.orders
WHERE order_date >= CURDATE() - INTERVAL 30 DAY;

--  List all delivery partners who have completed more than 1 delivery
SELECT d.partner_id, d.name, COUNT(o.order_id) AS orders_count
FROM swiggydb.deliverypartners d
JOIN swiggydb.orderdelivery o ON d.partner_id = o.partner_id
GROUP BY d.partner_id, d.name
HAVING COUNT(o.order_id) > 1;

-- Find customers who have placed orders on exactly three different days
SELECT customer_id, COUNT(DISTINCT DATE(order_date)) AS order_days
FROM swiggydb.orders
GROUP BY customer_id
HAVING COUNT(DISTINCT DATE(order_date)) = 3;

--  Find the delivery partner who has worked with the most different customers
SELECT d.partner_id, d.name, COUNT(DISTINCT o.customer_id) AS unique_customers
FROM swiggydb.deliverypartners d
JOIN swiggydb.orderdelivery od ON d.partner_id = od.partner_id
JOIN swiggydb.orders o ON od.order_id = o.order_id
GROUP BY d.partner_id, d.name
ORDER BY unique_customers DESC
LIMIT 1;

--  Identify customers in the same city who ordered from the same restaurant on different dates
SELECT 
  c1.customer_id AS customer_1, 
  c2.customer_id AS customer_2, 
  c1.city, 
  c1.name, 
  o1.restaurant_id, 
  DATE(o1.order_date) AS customer1_order_date,
  DATE(o2.order_date) AS customer2_order_date
FROM swiggydb.customers c1
JOIN swiggydb.orders o1 ON c1.customer_id = o1.customer_id
JOIN swiggydb.customers c2 ON c1.city = c2.city AND c1.customer_id <> c2.customer_id
JOIN swiggydb.orders o2 ON c2.customer_id = o2.customer_id
WHERE o1.restaurant_id = o2.restaurant_id
  AND DATE(o1.order_date) <> DATE(o2.order_date);
```


